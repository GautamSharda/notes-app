{"version":3,"sources":["components/Note.js","services/notes.js","App.js","reportWebVitals.js","index.js"],"names":["Note","note","toggleImportance","label","important","content","onClick","baseUrl","axios","get","then","response","data","id","newObject","put","post","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","useEffect","noteService","initialNotes","notesToShow","filter","map","console","log","find","n","changedNote","returnedNote","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","length","concat","value","onChange","target","type","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"8MAaeA,EAXF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UACf,qBAAqB,iBACzB,OACE,+BACGH,EAAKI,QACN,wBAAQC,QAASJ,EAAjB,SAAoCC,QCPpCI,EAAU,aAiBD,EAfA,WAEb,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa5B,EALA,SAACC,EAAIC,GAElB,OADgBN,IAAMO,IAAN,UAAaR,EAAb,YAAwBM,GAAMC,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAG5B,EAVA,SAAAE,GAEb,OADgBN,IAAMQ,KAAKT,EAASO,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SC8E5BK,EAlFH,SAACC,GACX,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAEAC,qBAAU,WACRC,IAAqBjB,MAAK,SAAAkB,GACxBP,EAASO,QAGV,IAEH,IAwBMC,EAAcL,EAClBJ,EACAA,EAAMU,QAAO,SAAA7B,GAAI,OAAIA,EAAKG,aAgB5B,OACE,gCACE,uCACA,8BACE,yBAAQE,QAAS,kBAAMmB,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACGK,EAAYE,KAAI,SAAA9B,GAAI,OACjB,cAAC,EAAD,CAEEA,KAAMA,EACNC,iBAAkB,kBA3BH,SAACW,GAC1BmB,QAAQC,IAAI,gBAEZ,IAAMhC,EAAQmB,EAAMc,MAAK,SAAAC,GAAC,OAAIA,EAAEtB,KAAOA,KACjCuB,EAAW,2BAAOnC,GAAP,IAAaG,WAAYH,EAAKG,YAE/CuB,EACUd,EAAIuB,GACX1B,MAAK,SAAA2B,GACJhB,EAASD,EAAMW,KAAI,SAAAI,GAAC,OAAIA,EAAEtB,KAAOA,EAAKsB,EAAIE,SAkBZC,CAAmBrC,EAAKY,MAF3CZ,EAAKY,SAMlB,uBAAM0B,SA3DM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBrC,QAASiB,EACTqB,MAAM,IAAIC,MAAOC,cACjBzC,UAAW0C,KAAKC,SAAW,GAC3BlC,GAAIO,EAAM4B,OAAS,GAGrBrB,EACQe,GACPhC,MAAK,SAAA2B,GACJhB,EAASD,EAAM6B,OAAOZ,IACtBd,EAAW,QA8CX,UACE,uBACE2B,MAAO5B,EACP6B,SA3CiB,SAACX,GACxBR,QAAQC,IAAIO,EAAMY,OAAOF,OACzB3B,EAAWiB,EAAMY,OAAOF,UA2CpB,wBAAQG,KAAK,SAAb,yBCtEOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB9C,MAAK,YAAkD,IAA/C+C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCCZO,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAO5BX,M","file":"static/js/main.264b3b69.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important\r\n    ? 'make not important':'make important'\r\n  return (\r\n    <li>\r\n      {note.content}\r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Note","import axios from 'axios'\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default {\r\n    getAll,\r\n    update,\r\n    create\r\n}","  \nimport React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport Note from './components/Note'\nimport noteService from './services/notes'\n\nconst App = (props) => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(false)\n\n  useEffect(() => {\n    noteService.getAll().then(initialNotes =>{\n      setNotes(initialNotes)\n      }\n    )\n  }, [])  \n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1,\n    }\n\n    noteService\n    .create(noteObject)\n    .then(returnedNote => {\n      setNotes(notes.concat(returnedNote))\n      setNewNote('')\n    })\n\n\n  }\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const notesToShow = showAll\n  ? notes\n  : notes.filter(note => note.important)\n\n  const toggleImportanceOf = (id) => {\n    console.log('here made it')\n\n    const note =  notes.find(n => n.id === id)\n    const changedNote = {...note, important: !note.important}\n\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(n => n.id !== id ? n : returnedNote))\n    })\n\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div>   \n      <ul>\n        {notesToShow.map(note => \n            <Note \n              key={note.id}\n              note={note}\n              toggleImportance={() => toggleImportanceOf(note.id)} \n            />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input\n          value={newNote}\n          onChange={handleNoteChange}\n        />\n        <button type=\"submit\">save</button>\n      </form>  \n    </div>\n  )\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\n\n  ReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n  );\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}